// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public static partial class RickAndMortyClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::WhosTheCharacterQuiz.Infrastructure.State.RickAndMortyClientStoreAccessor> AddRickAndMortyClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::WhosTheCharacterQuiz.Infrastructure.State.RickAndMortyClientStoreAccessor());
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WhosTheCharacterQuiz.Infrastructure.GetAllCharactersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WhosTheCharacterQuiz.Infrastructure.RickAndMortyClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WhosTheCharacterQuiz.Infrastructure.IRickAndMortyClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::WhosTheCharacterQuiz.Infrastructure.State.RickAndMortyClientStoreAccessor>("RickAndMortyClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("RickAndMortyClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>, global::WhosTheCharacterQuiz.Infrastructure.State.GetAllCharactersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>, global::WhosTheCharacterQuiz.Infrastructure.State.GetAllCharactersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WhosTheCharacterQuiz.Infrastructure.GetAllCharactersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WhosTheCharacterQuiz.Infrastructure.GetAllCharactersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WhosTheCharacterQuiz.Infrastructure.RickAndMortyClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WhosTheCharacterQuiz.Infrastructure.IRickAndMortyClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WhosTheCharacterQuiz.Infrastructure.RickAndMortyClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace WhosTheCharacterQuiz.Infrastructure
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharactersResult : global::System.IEquatable<GetAllCharactersResult>, IGetAllCharactersResult
    {
        public GetAllCharactersResult(global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters? characters)
        {
            Characters = characters;
        }

        /// <summary>
        /// Get the list of all characters
        /// </summary>
        public global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters? Characters { get; }

        public virtual global::System.Boolean Equals(GetAllCharactersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Characters is null && other.Characters is null) || Characters != null && Characters.Equals(other.Characters)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCharactersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Characters != null)
                {
                    hash ^= 397 * Characters.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharacters_Characters_Characters : global::System.IEquatable<GetAllCharacters_Characters_Characters>, IGetAllCharacters_Characters_Characters
    {
        public GetAllCharacters_Characters_Characters(global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters_Results?>? results)
        {
            Results = results;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters_Results?>? Results { get; }

        public virtual global::System.Boolean Equals(GetAllCharacters_Characters_Characters? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Results, other.Results));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCharacters_Characters_Characters)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Results != null)
                {
                    foreach (var Results_elm in Results)
                    {
                        if (Results_elm != null)
                        {
                            hash ^= 397 * Results_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharacters_Characters_Results_Character : global::System.IEquatable<GetAllCharacters_Characters_Results_Character>, IGetAllCharacters_Characters_Results_Character
    {
        public GetAllCharacters_Characters_Results_Character(global::System.String? id, global::System.String? image, global::System.String? name)
        {
            Id = id;
            Image = image;
            Name = name;
        }

        /// <summary>
        /// The id of the character.
        /// </summary>
        public global::System.String? Id { get; }

        /// <summary>
        /// Link to the character's image.
        /// All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.
        /// </summary>
        public global::System.String? Image { get; }

        /// <summary>
        /// The name of the character.
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetAllCharacters_Characters_Results_Character? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && ((Image is null && other.Image is null) || Image != null && Image.Equals(other.Image)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllCharacters_Characters_Results_Character)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Image != null)
                {
                    hash ^= 397 * Image.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IGetAllCharactersResult
    {
        /// <summary>
        /// Get the list of all characters
        /// </summary>
        public global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters? Characters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IGetAllCharacters_Characters
    {
        public global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters_Results?>? Results { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IGetAllCharacters_Characters_Characters : IGetAllCharacters_Characters
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IGetAllCharacters_Characters_Results
    {
        /// <summary>
        /// The id of the character.
        /// </summary>
        public global::System.String? Id { get; }

        /// <summary>
        /// Link to the character's image.
        /// All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.
        /// </summary>
        public global::System.String? Image { get; }

        /// <summary>
        /// The name of the character.
        /// </summary>
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IGetAllCharacters_Characters_Results_Character : IGetAllCharacters_Characters_Results
    {
    }

    /// <summary>
    /// Represents the operation service of the GetAllCharacters GraphQL operation
    /// <code>
    /// query GetAllCharacters {
    ///   characters {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       image
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharactersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllCharactersQueryDocument()
        {
        }

        public static GetAllCharactersQueryDocument Instance { get; } = new GetAllCharactersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1b897043c379261abfa079da78a98002");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllCharacters GraphQL operation
    /// <code>
    /// query GetAllCharacters {
    ///   characters {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       image
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharactersQuery : global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllCharactersResult> _operationExecutor;
        public GetAllCharactersQuery(global::StrawberryShake.IOperationExecutor<IGetAllCharactersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllCharactersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllCharactersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllCharactersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllCharactersQueryDocument.Instance.Hash.Value, name: "GetAllCharacters", document: GetAllCharactersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllCharacters GraphQL operation
    /// <code>
    /// query GetAllCharacters {
    ///   characters {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       image
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IGetAllCharactersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllCharactersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllCharactersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the RickAndMortyClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class RickAndMortyClient : global::WhosTheCharacterQuiz.Infrastructure.IRickAndMortyClient
    {
        private readonly global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery _getAllCharacters;
        public RickAndMortyClient(global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery getAllCharacters)
        {
            _getAllCharacters = getAllCharacters ?? throw new global::System.ArgumentNullException(nameof(getAllCharacters));
        }

        public static global::System.String ClientName => "RickAndMortyClient";
        public global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery GetAllCharacters => _getAllCharacters;
    }

    /// <summary>
    /// Represents the RickAndMortyClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial interface IRickAndMortyClient
    {
        global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersQuery GetAllCharacters { get; }
    }
}

namespace WhosTheCharacterQuiz.Infrastructure.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharactersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::WhosTheCharacterQuiz.Infrastructure.GetAllCharactersResult>
    {
        public GetAllCharactersResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult);
        public GetAllCharactersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetAllCharactersResultInfo info)
            {
                return new GetAllCharactersResult(MapIGetAllCharacters_Characters(info.Characters));
            }

            throw new global::System.ArgumentException("GetAllCharactersResultInfo expected.");
        }

        private global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters? MapIGetAllCharacters_Characters(global::WhosTheCharacterQuiz.Infrastructure.State.CharactersData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllCharacters_Characters returnValue = default !;
            if (data?.__typename.Equals("Characters", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllCharacters_Characters_Characters(MapIGetAllCharacters_Characters_ResultsArray(data.Results));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters_Results?>? MapIGetAllCharacters_Characters_ResultsArray(global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData?>? list)
        {
            if (list is null)
            {
                return null;
            }

            var characters = new global::System.Collections.Generic.List<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters_Results?>();
            foreach (global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData? child in list)
            {
                characters.Add(MapIGetAllCharacters_Characters_Results(child));
            }

            return characters;
        }

        private global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharacters_Characters_Results? MapIGetAllCharacters_Characters_Results(global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllCharacters_Characters_Results returnValue = default !;
            if (data?.__typename.Equals("Character", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllCharacters_Characters_Results_Character(data.Id, data.Image, data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharactersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetAllCharactersResultInfo(global::WhosTheCharacterQuiz.Infrastructure.State.CharactersData? characters)
        {
            Characters = characters;
        }

        /// <summary>
        /// Get the list of all characters
        /// </summary>
        public global::WhosTheCharacterQuiz.Infrastructure.State.CharactersData? Characters { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllCharactersResultInfo(Characters);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class GetAllCharactersBuilder : global::StrawberryShake.OperationResultBuilder<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult>
    {
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetAllCharactersBuilder(global::StrawberryShake.IOperationResultDataFactory<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::WhosTheCharacterQuiz.Infrastructure.IGetAllCharactersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            return new GetAllCharactersResultInfo(Deserialize_IGetAllCharacters_Characters(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characters")));
        }

        private global::WhosTheCharacterQuiz.Infrastructure.State.CharactersData? Deserialize_IGetAllCharacters_Characters(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Characters", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WhosTheCharacterQuiz.Infrastructure.State.CharactersData(typename, results: Deserialize_IGetAllCharacters_Characters_ResultsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "results")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData?>? Deserialize_IGetAllCharacters_Characters_ResultsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var characters = new global::System.Collections.Generic.List<global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                characters.Add(Deserialize_IGetAllCharacters_Characters_Results(child));
            }

            return characters;
        }

        private global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData? Deserialize_IGetAllCharacters_Characters_Results(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Character", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData(typename, id: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), image: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "image")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class CharactersData
    {
        public CharactersData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData?>? results = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Results = results;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WhosTheCharacterQuiz.Infrastructure.State.CharacterData?>? Results { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class CharacterData
    {
        public CharacterData(global::System.String __typename, global::System.String? id = default !, global::System.String? image = default !, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Image = image;
            Name = name;
        }

        public global::System.String __typename { get; }

        ///<summary>The id of the character.</summary>
        public global::System.String? Id { get; }

        ///<summary>Link to the character's image.All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.</summary>
        public global::System.String? Image { get; }

        ///<summary>The name of the character.</summary>
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "14.0.0.0")]
    public partial class RickAndMortyClientStoreAccessor : global::StrawberryShake.IStoreAccessor
    {
        public global::StrawberryShake.IOperationStore OperationStore => throw new global::System.NotSupportedException("OperationStore is not supported in store less mode");
        public global::StrawberryShake.IEntityStore EntityStore => throw new global::System.NotSupportedException("EntityStore is not supported in store less mode");
        public global::StrawberryShake.IEntityIdSerializer EntityIdSerializer => throw new global::System.NotSupportedException("EntityIdSerializer is not supported in store less mode");
        public global::StrawberryShake.IOperationRequestFactory GetOperationRequestFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationRequestFactory is not supported in store less mode");
        }

        public global::StrawberryShake.IOperationResultDataFactory GetOperationResultDataFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationResultDataFactory is not supported in store less mode");
        }
    }
}
